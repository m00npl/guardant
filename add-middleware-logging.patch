--- a/services/api-admin/src/index.ts
+++ b/services/api-admin/src/index.ts
@@ -1972,6 +1972,7 @@
     // Apply authentication middleware to all /api/admin/* routes except auth endpoints
     // This must be done after authManager is initialized
     app.use('/api/admin/*', async (c, next) => {
+      console.log('🔐 Middleware entry - path:', c.req.path, 'method:', c.req.method);
       // Skip auth for login/register/refresh endpoints
       const path = c.req.path;
       console.log('🔐 Auth middleware check for path:', path);
@@ -1986,11 +1987,23 @@
       }
       
       console.log('🔒 Applying auth middleware');
-      console.log('🔍 AuthManager exists?', !!authManager);
-      console.log('🔍 AuthMiddleware exists?', !!authMiddleware);
+      console.log('🔍 Has Authorization header?', !!c.req.header('Authorization'));
       
       if (!authMiddleware) {
         console.error('❌ authMiddleware not initialized!');
         return c.json({ success: false, error: 'Auth system not ready' }, 503);
       }
       
-      return authMiddleware(c, next);
+      // Call authMiddleware and check result
+      const result = await authMiddleware(c, async () => {
+        console.log('✅ Auth middleware passed, user set in context');
+        console.log('🔍 User in context:', c.get('user'));
+        console.log('🔍 Context vars:', Object.keys(c.var || {}));
+        await next();
+      });
+      
+      console.log('🔍 After auth middleware - user:', c.get('user'));
+      return result;
     });
     
     // Mount platform admin routes