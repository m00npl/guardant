# OWASP ZAP Baseline Security Testing Configuration
# This config defines security tests for GuardAnt application

# Target URLs
contexts:
  - name: "GuardAnt Admin API"
    url: "http://localhost:4000"
    includePaths:
      - "http://localhost:4000/api/.*"
    excludePaths:
      - "http://localhost:4000/health"
      - "http://localhost:4000/metrics"
    
  - name: "GuardAnt Public API"
    url: "http://localhost:4001"
    includePaths:
      - "http://localhost:4001/api/.*"
    excludePaths:
      - "http://localhost:4001/health"
      - "http://localhost:4001/metrics"
      
  - name: "GuardAnt Admin Frontend"
    url: "http://localhost:3000"
    includePaths:
      - "http://localhost:3000/.*"
    
  - name: "GuardAnt Public Frontend"
    url: "http://localhost:3001"
    includePaths:
      - "http://localhost:3001/.*"

# Authentication
authentication:
  - name: "JWT Authentication"
    type: "scriptBasedAuthentication"
    script: |
      // Login script for JWT authentication
      var HttpRequestHeader = Java.type('org.parosproxy.paros.network.HttpRequestHeader');
      var HttpMessage = Java.type('org.parosproxy.paros.network.HttpMessage');
      var URI = Java.type('org.apache.commons.httpclient.URI');
      
      function authenticate(helper, paramsValues, credentials) {
        var loginUrl = "http://localhost:4000/api/auth/login";
        var loginData = JSON.stringify({
          email: credentials.getParam("email"),
          password: credentials.getParam("password")
        });
        
        var msg = helper.prepareMessage();
        msg.getRequestHeader().setMethod(HttpRequestHeader.POST);
        msg.getRequestHeader().setURI(new URI(loginUrl, false));
        msg.getRequestHeader().setHeader("Content-Type", "application/json");
        msg.setRequestBody(loginData);
        
        helper.sendAndReceive(msg);
        
        var response = JSON.parse(msg.getResponseBody().toString());
        if (response.token) {
          return helper.newSession("JWT " + response.token);
        }
        return null;
      }
      
      function getRequiredParamsNames() {
        return ["email", "password"];
      }
      
      function getOptionalParamsNames() {
        return [];
      }
      
      function getCredentialsParamsNames() {
        return ["email", "password"];
      }

# Security test rules
rules:
  # High priority security tests
  - id: 10003  # Vulnerable JS Library
    name: "Vulnerable JavaScript Library"
    risk: "High"
    confidence: "Medium"
    enabled: true
    
  - id: 40018  # SQL Injection
    name: "SQL Injection"
    risk: "High"
    confidence: "High"
    enabled: true
    
  - id: 90019  # Code Injection
    name: "Code Injection"
    risk: "High"
    confidence: "High"
    enabled: true
    
  - id: 40012  # Cross Site Scripting (Reflected)
    name: "Cross Site Scripting (Reflected)"
    risk: "High"
    confidence: "Medium"
    enabled: true
    
  - id: 40014  # Cross Site Scripting (Persistent)
    name: "Cross Site Scripting (Persistent)"
    risk: "High"
    confidence: "Medium"
    enabled: true
    
  - id: 40016  # Cross Site Scripting (Persistent) - Prime
    name: "Cross Site Scripting (Persistent) - Prime"
    risk: "High"
    confidence: "High"
    enabled: true
    
  - id: 40017  # Cross Site Scripting (Persistent) - Spider
    name: "Cross Site Scripting (Persistent) - Spider"
    risk: "High"
    confidence: "High"
    enabled: true
    
  - id: 90020  # Remote OS Command Injection
    name: "Remote OS Command Injection"
    risk: "High"
    confidence: "High"
    enabled: true
    
  - id: 90021  # XPath Injection
    name: "XPath Injection"
    risk: "High"
    confidence: "High"
    enabled: true
    
  - id: 90023  # XML External Entity Attack
    name: "XML External Entity Attack"
    risk: "High"
    confidence: "Medium"
    enabled: true
    
  - id: 20019  # External Redirect
    name: "External Redirect"
    risk: "High"
    confidence: "Medium"
    enabled: true
    
  - id: 10202  # Absence of Anti-CSRF Tokens
    name: "Absence of Anti-CSRF Tokens"
    risk: "Medium"
    confidence: "Medium"
    enabled: true
    
  - id: 10016  # Web Browser XSS Protection Not Enabled
    name: "Web Browser XSS Protection Not Enabled"
    risk: "Low"
    confidence: "Medium"
    enabled: true
    
  - id: 10017  # Cross-Domain JavaScript Source File Inclusion
    name: "Cross-Domain JavaScript Source File Inclusion"
    risk: "Low"
    confidence: "Medium"
    enabled: true
    
  - id: 10020  # X-Frame-Options Header Scanner
    name: "X-Frame-Options Header Scanner"
    risk: "Medium"
    confidence: "Medium"
    enabled: true
    
  - id: 10021  # X-Content-Type-Options Header Missing
    name: "X-Content-Type-Options Header Missing"
    risk: "Low"
    confidence: "Medium"
    enabled: true
    
  - id: 10023  # Information Disclosure - Debug Error Messages
    name: "Information Disclosure - Debug Error Messages"
    risk: "Low"
    confidence: "Medium"
    enabled: true
    
  - id: 10024  # Information Disclosure - Sensitive Information in URL
    name: "Information Disclosure - Sensitive Information in URL"
    risk: "Medium"
    confidence: "Medium"
    enabled: true
    
  - id: 10025  # Information Disclosure - Sensitive Information in HTTP Referrer Header
    name: "Information Disclosure - Sensitive Information in HTTP Referrer Header"
    risk: "Medium"
    confidence: "Medium"
    enabled: true
    
  - id: 10026  # HTTP Parameter Override
    name: "HTTP Parameter Override"
    risk: "Medium"
    confidence: "Medium"
    enabled: true
    
  - id: 10027  # Information Disclosure - Suspicious Comments
    name: "Information Disclosure - Suspicious Comments"
    risk: "Low"
    confidence: "Low"
    enabled: true
    
  - id: 10028  # Open Redirect
    name: "Open Redirect"
    risk: "Medium"
    confidence: "Medium"
    enabled: true
    
  - id: 10029  # Cookie Poisoning
    name: "Cookie Poisoning"
    risk: "Medium"
    confidence: "Medium"
    enabled: true
    
  - id: 10030  # User Controllable Charset
    name: "User Controllable Charset"
    risk: "Medium"
    confidence: "Medium"
    enabled: true

# Custom test parameters for GuardAnt
parameters:
  # JWT token validation
  jwt:
    algorithms: ["HS256", "RS256"]
    secret_wordlist: "common-jwt-secrets.txt"
    
  # Multi-tenant isolation testing
  tenant_isolation:
    test_cross_tenant_access: true
    nest_subdomains: ["test1", "test2", "admin", "demo"]
    
  # API specific tests
  api_tests:
    test_rate_limiting: true
    test_input_validation: true
    test_authorization: true
    rate_limit_threshold: 100
    
  # Database injection testing
  database:
    test_sql_injection: true
    test_nosql_injection: true
    payloads: ["'; DROP TABLE users;--", "' OR '1'='1", "$ne", "$where"]
    
  # File upload testing (if applicable)
  file_upload:
    test_malicious_files: true
    extensions: [".php", ".jsp", ".exe", ".sh"]
    
  # Session management
  session:
    test_session_fixation: true
    test_session_hijacking: true
    test_concurrent_sessions: true
    
  # CORS testing
  cors:
    test_origins: ["http://evil.com", "null", "*"]
    test_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    test_headers: ["X-Custom-Header", "Authorization"]

# Reporting configuration
reporting:
  format: ["html", "json", "xml"]
  output_dir: "./security-reports"
  include_false_positives: false
  severity_threshold: "Medium"
  
  # Custom report sections
  sections:
    - name: "Multi-Tenant Security"
      description: "Security tests specific to multi-tenant architecture"
      tests: ["tenant_isolation", "cross_tenant_access"]
      
    - name: "API Security"
      description: "REST API security vulnerabilities"
      tests: ["sql_injection", "xss", "authorization"]
      
    - name: "Authentication & Authorization"
      description: "Auth mechanism security"
      tests: ["jwt_security", "session_management", "privilege_escalation"]
      
    - name: "Infrastructure Security"
      description: "Infrastructure and configuration security"
      tests: ["security_headers", "ssl_configuration", "information_disclosure"]

# Test execution settings
execution:
  max_children: 5
  max_duration: 3600  # 1 hour
  delay_in_ms: 200
  
  # Spider configuration
  spider:
    max_depth: 3
    max_children: 10
    exclude_regex: [
      ".*\.(jpg|jpeg|png|gif|ico|svg|css|js|woff|woff2|ttf|eot)$",
      ".*/logout$",
      ".*/signout$"
    ]
    
  # Active scan configuration
  active_scan:
    policy: "API-Minimal-Example"
    strength: "Medium"
    threshold: "Medium"
    
# Environment-specific settings
environments:
  development:
    base_url: "http://localhost"
    admin_api_port: 4000
    public_api_port: 4001
    admin_frontend_port: 3000
    public_frontend_port: 3001
    
  staging:
    base_url: "https://staging.guardant.me"
    admin_api_port: 443
    public_api_port: 443
    admin_frontend_port: 443
    public_frontend_port: 443
    
  production:
    # Production testing should be very careful
    base_url: "https://guardant.me"
    limited_scope: true
    passive_only: true
    exclude_destructive: true