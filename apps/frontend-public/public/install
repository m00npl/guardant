#!/bin/bash

# GuardAnt Worker Installer Script
# Usage: curl -sSL https://guardant.me/install | bash

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REPO_URL="https://github.com/m00npl/guardant-worker.git"
INSTALL_DIR="$HOME/guardant-worker"

echo -e "${BLUE}GuardAnt Worker Installer${NC}"
echo "================================"
echo ""

# Detect OS
echo -e "${YELLOW}Detecting operating system...${NC}"
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$NAME
    VER=$VERSION_ID
else
    OS=$(uname -s)
    VER=$(uname -r)
fi
echo "OS: $OS"
echo ""

# Function to ask for user consent
ask_install() {
    local package=$1
    echo -e "${YELLOW}$package is not installed.${NC}"
    read -p "Would you like to install $package? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to install Docker
install_docker() {
    echo -e "${YELLOW}Installing Docker...${NC}"
    if command -v apt-get &> /dev/null; then
        # Ubuntu/Debian
        curl -fsSL https://get.docker.com | sh
        sudo usermod -aG docker $USER
        echo -e "${GREEN}✓ Docker installed${NC}"
        echo -e "${YELLOW}Note: You may need to log out and back in for group changes to take effect${NC}"
    elif command -v yum &> /dev/null; then
        # CentOS/RHEL
        sudo yum install -y yum-utils
        sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $USER
        echo -e "${GREEN}✓ Docker installed${NC}"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        echo -e "${RED}Please install Docker Desktop for Mac from:${NC}"
        echo "https://www.docker.com/products/docker-desktop"
        exit 1
    else
        echo -e "${RED}Unsupported OS for automatic Docker installation${NC}"
        echo "Please install Docker manually: https://docs.docker.com/get-docker/"
        exit 1
    fi
}

# Function to install Git
install_git() {
    echo -e "${YELLOW}Installing Git...${NC}"
    if command -v apt-get &> /dev/null; then
        sudo apt-get update && sudo apt-get install -y git
    elif command -v yum &> /dev/null; then
        sudo yum install -y git
    elif command -v brew &> /dev/null; then
        brew install git
    else
        echo -e "${RED}Cannot install Git automatically${NC}"
        echo "Please install Git manually"
        exit 1
    fi
    echo -e "${GREEN}✓ Git installed${NC}"
}

# Check requirements
echo -e "${YELLOW}Checking requirements...${NC}"

# Check Docker
if ! command -v docker &> /dev/null; then
    if ask_install "Docker"; then
        install_docker
    else
        echo -e "${RED}Docker is required to run GuardAnt Worker${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}✓ Docker found${NC}"
fi

# Check Docker Compose
if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null 2>&1; then
    echo -e "${YELLOW}Docker Compose not found${NC}"
    if command -v docker-compose &> /dev/null; then
        echo -e "${YELLOW}Found legacy docker-compose, but GuardAnt requires Docker Compose V2${NC}"
    fi
    
    if ask_install "Docker Compose V2"; then
        if command -v apt-get &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y docker-compose-plugin
        elif command -v yum &> /dev/null; then
            sudo yum install -y docker-compose-plugin
        else
            echo -e "${RED}Please install Docker Compose V2 manually${NC}"
            exit 1
        fi
        echo -e "${GREEN}✓ Docker Compose installed${NC}"
    else
        echo -e "${RED}Docker Compose is required${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}✓ Docker Compose found${NC}"
fi

# Check Git
if ! command -v git &> /dev/null; then
    if ask_install "Git"; then
        install_git
    else
        echo -e "${RED}Git is required${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}✓ Git found${NC}"
fi

# Check if Docker daemon is running
if ! docker info &> /dev/null; then
    echo -e "${YELLOW}Docker daemon is not running${NC}"
    if command -v systemctl &> /dev/null; then
        read -p "Start Docker daemon? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo systemctl start docker
            echo -e "${GREEN}✓ Docker daemon started${NC}"
        else
            echo -e "${RED}Docker daemon must be running${NC}"
            exit 1
        fi
    else
        echo -e "${RED}Please start Docker daemon manually${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}✓ All requirements met${NC}"
echo ""

# Detect location
echo -e "${YELLOW}Detecting your location...${NC}"
LOCATION_INFO=$(curl -s https://ipinfo.io)
if [ $? -eq 0 ] && [ -n "$LOCATION_INFO" ]; then
    # Parse JSON manually for better compatibility
    CITY=$(echo "$LOCATION_INFO" | sed -n 's/.*"city":\s*"\([^"]*\)".*/\1/p')
    REGION=$(echo "$LOCATION_INFO" | sed -n 's/.*"region":\s*"\([^"]*\)".*/\1/p')
    COUNTRY=$(echo "$LOCATION_INFO" | sed -n 's/.*"country":\s*"\([^"]*\)".*/\1/p')
    IP=$(echo "$LOCATION_INFO" | sed -n 's/.*"ip":\s*"\([^"]*\)".*/\1/p')
    
    if [ -n "$CITY" ] && [ -n "$COUNTRY" ]; then
        echo "Location: $CITY, $REGION, $COUNTRY"
        echo "IP: $IP"
    else
        echo -e "${YELLOW}Location detection incomplete${NC}"
    fi
else
    echo -e "${YELLOW}Could not detect location (not required)${NC}"
fi
echo ""

# Get email
echo -e "${YELLOW}Worker Registration${NC}"
echo "Your email address will be used to:"
echo "  • Register this worker with GuardAnt"
echo "  • Receive approval notification"
echo "  • Get RabbitMQ credentials"
echo ""
echo -e "${YELLOW}Enter your email address:${NC}"
read -p "> " OWNER_EMAIL

if [ -z "$OWNER_EMAIL" ]; then
    echo -e "${RED}Email is required!${NC}"
    exit 1
fi

# Check if email is valid (basic check)
if ! [[ "$OWNER_EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
    echo -e "${RED}Invalid email format!${NC}"
    exit 1
fi

# Confirm email
echo ""
echo -e "${BLUE}Email: $OWNER_EMAIL${NC}"
read -p "Is this correct? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Installation cancelled"
    exit 1
fi

# Clone repository
echo ""
echo -e "${YELLOW}Installing GuardAnt Worker...${NC}"

if [ -d "$INSTALL_DIR" ]; then
    echo -e "${YELLOW}Directory $INSTALL_DIR already exists.${NC}"
    read -p "Remove and reinstall? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "$INSTALL_DIR"
    else
        echo "Installation cancelled"
        exit 1
    fi
fi

git clone "$REPO_URL" "$INSTALL_DIR"
cd "$INSTALL_DIR"

# Fix ownership if running with sudo
if [ "$SUDO_USER" ]; then
    echo -e "${YELLOW}Fixing directory ownership...${NC}"
    chown -R "$SUDO_USER:$SUDO_USER" "$INSTALL_DIR"
    echo -e "${GREEN}✓ Ownership set to $SUDO_USER${NC}"
fi

# Create .env file
echo ""
echo -e "${YELLOW}Creating configuration...${NC}"

cat > .env << EOF
# GuardAnt Worker Configuration
OWNER_EMAIL=$OWNER_EMAIL
LOG_LEVEL=info

# RabbitMQ URL will be added after approval
# RABBITMQ_URL=
EOF

echo -e "${GREEN}✓ Configuration created${NC}"

# Build and start
echo ""
echo -e "${YELLOW}Building and starting worker...${NC}"

# Run docker commands as the correct user if using sudo
if [ "$SUDO_USER" ]; then
    sudo -u "$SUDO_USER" docker compose build
    sudo -u "$SUDO_USER" docker compose up -d
else
    docker compose build
    docker compose up -d
fi

# Check if started
sleep 3
if [ "$SUDO_USER" ]; then
    if sudo -u "$SUDO_USER" docker compose ps | grep -q "guardant-worker.*running"; then
        echo -e "${GREEN}✓ Worker started successfully!${NC}"
    else
        echo -e "${RED}Failed to start worker${NC}"
        echo "Check logs with: cd $INSTALL_DIR && docker compose logs"
        exit 1
    fi
else
    if docker compose ps | grep -q "guardant-worker.*running"; then
        echo -e "${GREEN}✓ Worker started successfully!${NC}"
    else
        echo -e "${RED}Failed to start worker${NC}"
        echo "Check logs with: cd $INSTALL_DIR && docker compose logs"
        exit 1
    fi
fi

# Show next steps
echo ""
echo -e "${GREEN}Installation complete!${NC}"
echo ""
echo -e "${BLUE}Next steps:${NC}"
echo "1. Your worker will register automatically"
echo "2. Wait for approval from GuardAnt admin"
echo "3. You'll receive RabbitMQ credentials via email"
echo "4. Add credentials to $INSTALL_DIR/.env"
echo "5. Restart worker: cd $INSTALL_DIR && docker compose restart"
echo ""
echo -e "${YELLOW}Useful commands:${NC}"
echo "View logs:    cd $INSTALL_DIR && docker compose logs -f"
echo "Stop worker:  cd $INSTALL_DIR && docker compose down"
echo "Start worker: cd $INSTALL_DIR && docker compose up -d"
echo ""
echo -e "${GREEN}Thank you for joining GuardAnt!${NC}"